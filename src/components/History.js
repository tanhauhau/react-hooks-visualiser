import React from 'react';
import styled from 'styled-components';
import { ObjectHover } from './ObjectHover';

export default function History({ history }) {
  if (!history) {
    return null;
  }
  return history.map((item, index) => <HistoryItem key={index} item={item} />);
}

const Item = styled.div`
  margin: 4px;
  padding: 8px;
  border-radius: 4px;
  border: 1px solid gray;
  transition: transform 200ms ease-in-out;
  cursor: pointer;

  :hover {
    transform: translate(-1px, -1px);
  }
`;

function HistoryItem({ item }) {
  if (item.status !== 'running') {
    // filter out 'ready' state
    return null;
  }
  return (
    <Item>
      <Logs logs={item.logs} />
      {item.statementIndex === -1
        ? item.isComponentDirty
          ? `${item.componentName} has been scheduled for a re-render`
          : `${item.componentName} is ready to be rendered`
        : null}
    </Item>
  );
}

function Logs({ logs }) {
  if (!logs || !Array.isArray(logs)) {
    return null;
  }
  return logs.map((log, index) => <Log key={index} log={log} />);
}

const HookBadge = styled.div`
  display: inline-block;
  border-radius: 4px;
  color: white;
  background-color: slateblue;
  padding: 1px 4px;
  font-weight: 500;
  font-size: 0.8em;
  margin-right: 4px;
`;

const LOG_MAP = {
  assignment: LogAssignment,
  render: LogRender,

  'hooks/useState': LogHookUseState,
  'update/useState': LogUpdateUseState,

  'hooks/useReducer': LogHookUseReducer,
  'update/useReducer': LogUpdateUseReducer,
};

function Log({ log }) {
  const LogComponent = LOG_MAP[log.type];
  if (LogComponent) {
    return <LogComponent log={log} />;
  }
  return null;
}

function LogAssignment({ log }) {
  return (
    <div>
      Assigning <ObjectHover data={log.value} /> to {log.id}
    </div>
  );
}

function LogRender({ log }) {
  return (
    <div>
      Return a virtual DOM.{' '}
      <a
        href="https://reactjs.org/docs/reconciliation.html"
        target="_blank"
        rel="noopener noreferrer"
      >
        Reconcile
      </a>{' '}
      and render to DOM.
    </div>
  );
}

function LogHookUseState({ log }) {
  return (
    <div>
      <HookBadge>useState</HookBadge>
      {log.isInitial ? (
        <>
          Creating new <em>useState</em> hook with initial state{' '}
          <ObjectHover data={log.state} />
        </>
      ) : (
        <>
          Reusing <em>useState</em> hook, with state{' '}
          <ObjectHover data={log.state} /> and setState{' '}
          <ObjectHover data={log.setState} />{' '}
        </>
      )}
    </div>
  );
}

function LogUpdateUseState({ log }) {
  return (
    <div>
      <HookBadge>useState</HookBadge>
      Updated <ObjectHover data={log.oldValue} /> to{' '}
      <ObjectHover data={log.newValue} />
    </div>
  );
}

function LogHookUseReducer({ log }) {
  return (
    <div>
      <HookBadge>useReducer</HookBadge>
      {log.isInitial ? (
        <>
          Creating new <em>useReducer</em> hook with initial state{' '}
          <ObjectHover data={log.state} /> (
          {log.init ? (
            <>
              Generated by calling <ObjectHover data={log.init} /> with{' '}
              <ObjectHover data={log.initialArg} />
            </>
          ) : (
            'Passed as 2nd argument in useReducer'
          )}
        </>
      ) : (
        <>
          Reusing <em>useReducer</em> hook, with state{' '}
          <ObjectHover data={log.state} /> and dispatch{' '}
          <ObjectHover data={log.dispatch} />
        </>
      )}
    </div>
  );
}

function LogUpdateUseReducer({ log }) {
  return (
    <div>
      <HookBadge>useReducer</HookBadge>
      Updated to new state <ObjectHover data={log.nextState} /> (return value
      from calling reducer <ObjectHover data={log.reducer} /> with{' '}
      <ObjectHover data={log.oldState} /> and <ObjectHover data={log.action} />)
    </div>
  );
}
